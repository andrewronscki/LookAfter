{
  "_args": [
    [
      {
        "raw": "cloudant-follow@^0.18.0",
        "scope": null,
        "escapedName": "cloudant-follow",
        "name": "cloudant-follow",
        "rawSpec": "^0.18.0",
        "spec": ">=0.18.0 <0.19.0",
        "type": "range"
      },
      "C:\\Users\\ANDRE\\Desktop\\LooKAfterBackend\\node_modules\\nano"
    ]
  ],
  "_from": "cloudant-follow@^0.18.0",
  "_hasShrinkwrap": false,
  "_id": "cloudant-follow@0.18.1",
  "_location": "/cloudant-follow",
  "_nodeVersion": "6.14.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/cloudant-follow_0.18.1_1548171490504_0.6252690380063335"
  },
  "_npmUser": {
    "name": "smithsz",
    "email": "sam.smith@uk.ibm.com"
  },
  "_npmVersion": "6.4.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cloudant-follow@^0.18.0",
    "scope": null,
    "escapedName": "cloudant-follow",
    "name": "cloudant-follow",
    "rawSpec": "^0.18.0",
    "spec": ">=0.18.0 <0.19.0",
    "type": "range"
  },
  "_requiredBy": [
    "/nano"
  ],
  "_resolved": "https://registry.npmjs.org/cloudant-follow/-/cloudant-follow-0.18.1.tgz",
  "_shasum": "7f4a54814abce62c099987fa1bb0131d455bc79f",
  "_shrinkwrap": null,
  "_spec": "cloudant-follow@^0.18.0",
  "_where": "C:\\Users\\ANDRE\\Desktop\\LooKAfterBackend\\node_modules\\nano",
  "author": {
    "name": "IBM Cloudant",
    "email": "support@cloudant.com"
  },
  "bin": {
    "follow": "./cli.js"
  },
  "browser": {
    "request": "browser-request"
  },
  "bugs": {
    "url": "https://github.com/cloudant-labs/cloudant-follow/issues"
  },
  "contributors": [
    {
      "name": "Jarrett Cruger",
      "email": "jcrugzz@gmail.com"
    }
  ],
  "dependencies": {
    "browser-request": "~0.3.0",
    "debug": "^4.0.1",
    "request": "^2.88.0"
  },
  "description": "Extremely robust, fault-tolerant Cloudant/CouchDB changes follower",
  "devDependencies": {
    "commander": "^2.11.0",
    "eslint": "^5.0.0",
    "eslint-config-semistandard": "^13.0.0",
    "eslint-config-standard": "^12.0.0",
    "eslint-plugin-header": "^2.0.0",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-node": "^8.0.0",
    "eslint-plugin-promise": "^4.0.0",
    "eslint-plugin-react": "^7.7.0",
    "eslint-plugin-standard": "^4.0.0",
    "tap": "~12.1.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-hflb0VlRrHcSkkvsvCZt6UdjbsGnKjy3d6BA3VV3e+WIXZP63HO6mVtOUd+df5W25OkkaqFM191MqQDW2Y7Ikw==",
    "shasum": "7f4a54814abce62c099987fa1bb0131d455bc79f",
    "tarball": "https://registry.npmjs.org/cloudant-follow/-/cloudant-follow-0.18.1.tgz",
    "fileCount": 11,
    "unpackedSize": 59474,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcRzjjCRA9TVsSAnZWagAAONsQAJV2jAN7jWWpHePU41MI\nKMs20v2m22n5OI1amOKYMUyZ/EfzVuyoDtBO9V9eTQfMMtFnJao4hTW17Egr\nWmzONRdRuNSv51+uZ3gw87HbC5Utga+T3oLkhYiwRaQXqckWHBSHQwSykTwW\nLdSpXRWHmJvAGlu6A/KqukI+dVfgphqXKs90HVlKI1FtCHu7+oH6vFXmg/o2\n/BlA+Lijd4NuTH9MjzIYErX6eIemsSyPdcFRJIA+XgJzI4fBl74t45k5tj0J\nMjUhw2xmQAKZ3Pgvgv4VzWtISpEppglUmnXDUlymvPEYXkP5TzTFcS39gGZ9\n/X3whmizSf4NimqzVmVAksmunjiZNxp8tAnzY2u+iCuwMpx2Qf5YPTQzkx3j\nmeHVRtZ+V08U6HlmXfX52V/kF543NergTJYbD0mXFbGI/aa7D+/9Q0R3O/EF\nU1wQXpRdm6wcRoi1ShJySMY4cyq5YsQvLABKHkyT0w2Ipl6XhBkypGD1+Ltc\nZmAlpSxMIsdWJYE7eu2sS7ahMnTjBUfN1BvnaDfFHbehEaJeOd9Wa2/UsxK/\nkAb6eHQxlm81c7aEED+JZ7KZO6Bm6art5Z/3yi6PiamaejCYrLfTyIaN2JKC\nBWpGuf3KgUptOqsy1cry8CgywZnGpvN+kVAKWUh2ec3yE4/spAOfe3ajV3V0\nOUAx\r\n=XxYU\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6.13.0"
  },
  "homepage": "https://github.com/cloudant-labs/cloudant-follow",
  "keywords": [
    "cloudant",
    "couchdb",
    "changes",
    "sleep",
    "sleepy"
  ],
  "license": "Apache-2.0",
  "main": "./api.js",
  "maintainers": [
    {
      "name": "emlaver",
      "email": "emlaver@us.ibm.com"
    },
    {
      "name": "glynnbird",
      "email": "glynn.bird@gmail.com"
    },
    {
      "name": "mikerhodes",
      "email": "mike.rhodes@dx13.co.uk"
    },
    {
      "name": "smithsz",
      "email": "sam.smith@uk.ibm.com"
    }
  ],
  "name": "cloudant-follow",
  "optionalDependencies": {},
  "readme": "# Follow: CouchDB changes and db updates notifier for NodeJS\n[![Build Status](https://travis-ci.org/cloudant-labs/cloudant-follow.svg?branch=master)](https://travis-ci.org/cloudant-labs/cloudant-follow)\n[![Greenkeeper badge](https://badges.greenkeeper.io/cloudant-labs/cloudant-follow.svg)](https://greenkeeper.io/)\n\n[![NPM](https://nodei.co/npm/cloudant-follow.png?compact=true)](https://nodei.co/npm/cloudant-follow/)\n\n---\n\nThis is a fork of the Iris Couch [follow](https://github.com/iriscouch/follow) project.\n\nThis fork is maintained by IBM Cloudant in order to provide fixes for the [nodejs-cloudant](https://github.com/cloudant/nodejs-cloudant) library.\n\n---\n\n## Example\n\nThis looks much like the [request][req] API.\n\n```javascript\nvar follow = require('cloudant-follow');\nfollow(\"https://example.iriscouch.com/boogie\", function(error, change) {\n  if(!error) {\n    console.log(\"Got change number \" + change.seq + \": \" + change.id);\n  }\n})\n```\n\nThe *error* parameter to the callback will basically always be `null`.\n\n## Objective\n\nThe API must be very simple: notify me every time a change happens in the DB. Also, never fail.\n\nIf an error occurs, Follow will internally retry without notifying your code.\n\nSpecifically, this should be possible:\n\n1. Begin a changes feed. Get a couple of change callbacks\n2. Shut down CouchDB\n3. Go home. Have a nice weekend. Come back on Monday.\n4. Start CouchDB with a different IP address\n5. Make a couple of changes\n6. Update DNS so the domain points to the new IP\n7. Once DNS propagates, get a couple more change callbacks\n\n## Failure Mode\n\nIf CouchDB permanently crashes, there is an option of failure modes:\n\n* **Default:** Simply never call back with a change again\n* **Optional:** Specify an *inactivity* timeout. If no changes happen by the timeout, Follow will signal an error.\n\n## DB Updates\n\nIf the db url ends with `/_db_updates`, Follow will provide a\n[_db_updates](http://docs.couchdb.org/en/latest/api/server/common.html?highlight=db_updates#get--_db_updates) feed.\n\nFor each change, Follow will emit a `change` event containing:\n\n* `type`: `created`, `updated` or `deleted`.\n* `db_name`: Name of the database where the change occoured.\n* `ok`: Event operation status (boolean).\n\nNote that this feature is available as of CouchDB 1.4.\n\n### Simple API: follow(options, callback)\n\nThe first argument is an options object. The only required option is `db`. Instead of an object, you can use a string to indicate the `db` value.\n\n```javascript\nfollow({db:\"https://example.iriscouch.com/boogie\", include_docs:true}, function(error, change) {\n  if(!error) {\n    console.log(\"Change \" + change.seq + \" has \" + Object.keys(change.doc).length + \" fields\");\n  }\n})\n```\n\n<a name=\"options\"></a>\nAll of the CouchDB _changes options are allowed. See http://guide.couchdb.org/draft/notifications.html.\n\n* `db` | Fully-qualified URL of a couch database. (Basic auth URLs are ok.)\n* `since` | The sequence number to start from. Use `\"now\"` to start from the latest change in the DB.\n* `heartbeat` | Milliseconds within which CouchDB must respond (default: **30000** or 30 seconds)\n* `feed` | **Optional but only \"continuous\" is allowed**\n* `filter` |\n  * **Either** a path to design document filter, e.g. `app/important`\n  * **Or** a Javascript `function(doc, req) { ... }` which should return true or false\n* `view`  | a path to design document view, e.g. `app/myView`\n* `query_params` | **Optional** for use in with `filter` functions, passed as `req.query` to the filter function\n\nBesides the CouchDB options, more are available:\n\n* `headers` | Object with HTTP headers to add to the request\n* `inactivity_ms` | Maximum time to wait between **changes**. Omitting this means no maximum.\n* `max_retry_seconds` | Maximum time to wait between retries (default: 360 seconds)\n* `initial_retry_delay` | Time to wait before the first retry, in milliseconds (default 1000 milliseconds)\n* `response_grace_time` | Extra time to wait before timing out, in milliseconds (default 5000 milliseconds)\n* `httpAgent` | Specify a custom HTTP agent to use for all requests (default: `request`).\n\n## Object API\n\nThe main API is a thin wrapper around the EventEmitter API.\n\n```javascript\nvar follow = require('cloudant-follow');\n\nvar opts = {}; // Same options paramters as before\nvar feed = new follow.Feed(opts);\n\n// You can also set values directly.\nfeed.db            = \"http://example.iriscouch.com/boogie\";\nfeed.since         = 3;\nfeed.heartbeat     = 30    * 1000\nfeed.inactivity_ms = 86400 * 1000;\n\nfeed.filter = function(doc, req) {\n  // req.query is the parameters from the _changes request and also feed.query_params.\n  console.log('Filtering for query: ' + JSON.stringify(req.query));\n\n  if(doc.stinky || doc.ugly)\n    return false;\n  return true;\n}\n\nfeed.on('change', function(change) {\n  console.log('Doc ' + change.id + ' in change ' + change.seq + ' is neither stinky nor ugly.');\n})\n\nfeed.on('error', function(er) {\n  console.error('Since Follow always retries on errors, this must be serious');\n  throw er;\n})\n\nfeed.follow();\n```\n\n<a name=\"pause\"></a>\n## Pause and Resume\n\nA Follow feed is a Node.js stream. If you get lots of changes and processing them takes a while, use `.pause()` and `.resume()` as needed. Pausing guarantees that no new events will fire. Resuming guarantees you'll pick up where you left off.\n\n```javascript\nfollow(\"https://example.iriscouch.com/boogie\", function(error, change) {\n  var feed = this\n\n  if(change.seq == 1) {\n    console.log('Uh oh. The first change takes 30 hours to process. Better pause.')\n    feed.pause()\n    setTimeout(function() { feed.resume() }, 30 * 60 * 60 * 1000)\n  }\n\n  // ... 30 hours with no events ...\n\n  else\n    console.log('No need to pause for normal change: ' + change.id)\n})\n```\n\n<a name=\"events\"></a>\n## Events\n\nThe feed object is an EventEmitter. There are a few ways to get a feed object:\n\n* Use the object API above\n* Use the return value of `follow()`\n* In the callback to `follow()`, the *this* variable is bound to the feed object.\n\nOnce you've got one, you can subscribe to these events:\n\n* **start** | Before any i/o occurs\n* **confirm_request** | `function(req)` | The database confirmation request is sent; passed the `request` object\n* **confirm** | `function(db_obj)` | The database is confirmed; passed the couch database object\n* **change** | `function(change)` | A change occured; passed the change object from CouchDB\n* **catchup** | `function(seq_id)` | The feed has caught up to the *update_seq* from the confirm step. Assuming no subsequent changes, you have seen all the data.\n* **wait** | Follow is idle, waiting for the next data chunk from CouchDB\n* **timeout** | `function(info)` | Follow did not receive a heartbeat from couch in time. The passed object has `.elapsed_ms` set to the elapsed time\n* **retry** | `function(info)` | A retry is scheduled (usually after a timeout or disconnection). The passed object has\n  * `.since` the current sequence id\n  * `.after` the milliseconds to wait before the request occurs (on an exponential fallback schedule)\n  * `.db` the database url (scrubbed of basic auth credentials)\n* **stop** | The feed is stopping, because of an error, or because you called `feed.stop()`\n* **error** | `function(err)` | An error occurs\n\n## Error conditions\n\nFollow is happy to retry over and over, for all eternity. It will only emit an error if it thinks your whole application might be in trouble.\n\n* *DB confirmation* failed: Follow confirms the DB with a preliminary query, which must reply properly.\n* *DB is deleted*: Even if it retried, subsequent sequence numbers would be meaningless to your code.\n* *Your inactivity timer* expired: This is a last-ditch way to detect possible errors. What if couch is sending heartbeats just fine, but nothing has changed for 24 hours? You know that for your app, 24 hours with no change is impossible. Maybe your filter has a bug? Maybe you queried the wrong DB? Whatever the reason, Follow will emit an error.\n* JSON parse error, which should be impossible from CouchDB\n* Invalid change object format, which should be impossible from CouchDB\n* Internal error, if the internal state seems wrong, e.g. cancelling a timeout that already expired, etc. Follow tries to fail early.\n\n## Tests\n\nFollow uses [node-tap][tap]. If you clone this Git repository, tap is included.\n\n    $ ./node_modules/.bin/tap test/*.js test/issues/*.js\n    ok test/couch.js ...................................... 11/11\n    ok test/follow.js ..................................... 69/69\n    ok test/issues.js ..................................... 44/44\n    ok test/stream.js ................................... 300/300\n    ok test/issues/10.js .................................. 11/11\n    total ............................................... 435/435\n\n    ok\n\n## License\n\nApache 2.0\n\n[req]: https://github.com/mikeal/request\n[tap]: https://github.com/isaacs/node-tap\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/cloudant-labs/cloudant-follow.git"
  },
  "scripts": {
    "test": "eslint --ignore-path .eslintignore . && tap test/*.js",
    "unreliable-feed-test": "tap --no-timeout test/unreliable_feed_test/unreliable_feed.js"
  },
  "version": "0.18.1"
}
