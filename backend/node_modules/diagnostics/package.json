{
  "_args": [
    [
      {
        "raw": "diagnostics@^1.1.1",
        "scope": null,
        "escapedName": "diagnostics",
        "name": "diagnostics",
        "rawSpec": "^1.1.1",
        "spec": ">=1.1.1 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\ANDRE\\Desktop\\LooKAfterBackend\\node_modules\\winston"
    ]
  ],
  "_from": "diagnostics@^1.1.1",
  "_hasShrinkwrap": false,
  "_id": "diagnostics@1.1.1",
  "_location": "/diagnostics",
  "_nodeVersion": "8.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/diagnostics_1.1.1_1531824703018_0.9588502622026087"
  },
  "_npmUser": {
    "name": "3rdeden",
    "email": "npm@3rd-Eden.com"
  },
  "_npmVersion": "6.1.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "diagnostics@^1.1.1",
    "scope": null,
    "escapedName": "diagnostics",
    "name": "diagnostics",
    "rawSpec": "^1.1.1",
    "spec": ">=1.1.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/winston"
  ],
  "_resolved": "https://registry.npmjs.org/diagnostics/-/diagnostics-1.1.1.tgz",
  "_shasum": "cab6ac33df70c9d9a727490ae43ac995a769b22a",
  "_shrinkwrap": null,
  "_spec": "diagnostics@^1.1.1",
  "_where": "C:\\Users\\ANDRE\\Desktop\\LooKAfterBackend\\node_modules\\winston",
  "author": {
    "name": "Arnout Kazemier"
  },
  "browser": "./browser.js",
  "bugs": {
    "url": "https://github.com/bigpipe/diagnostics/issues"
  },
  "contributors": [
    {
      "name": "Martijn Swaagman",
      "url": "https://github.com/swaagie"
    },
    {
      "name": "Jarrett Cruger",
      "url": "https://github.com/jcrugzz"
    },
    {
      "name": "Sevastos",
      "url": "https://github.com/sevastos"
    }
  ],
  "dependencies": {
    "colorspace": "1.1.x",
    "enabled": "1.0.x",
    "kuler": "1.0.x"
  },
  "description": "Tools for debugging your node.js modules and event loop",
  "devDependencies": {
    "assume": "2.1.x",
    "mocha": "5.2.x",
    "pre-commit": "1.2.x"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-8wn1PmdunLJ9Tqbx+Fx/ZEuHfJf4NKSN2ZBj7SJC/OWRWha843+WsTjqMe1B5E3p28jqBlp+mJ2fPVxPyNgYKQ==",
    "shasum": "cab6ac33df70c9d9a727490ae43ac995a769b22a",
    "tarball": "https://registry.npmjs.org/diagnostics/-/diagnostics-1.1.1.tgz",
    "fileCount": 10,
    "unpackedSize": 142642,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbTco/CRA9TVsSAnZWagAAmn4P/iy0D8yb7iZ9YpdATFHF\nFAcpsyRF/Eu1MD4logAdjy4n2XcA+y35z/4e9P1347YHmvQb9kBERnlAX3gG\njpMLZlxP4a4Kn+GC0j81QACUlFH+HdI96F0p9WWdOwk3NJ31IVt7JifHvJzo\na/KzaJ1q8JXAxqUdrmHHYfyAYUnchFV8ZjKZFyOHAceRjqLjqoN/jJK5OVE8\n++AtKUmpHvtPUEsR75H188TWtPIGZ9zTrvEznWVlt4R3oVwcdHk+9mMGOwNp\nXy2Ys6As5BmOwpU2dNwJasSNdrmi7RyOTmMq2gme6LX7TAJbE4oQYtPbTwb5\noLLeadaNm0zXsNhuJkegAdcwSsrTjFTAaSLfs9MSclFIbn0b4nUWQ0lNlViB\nezA1jQ1hek+qg8kIxYOp34VkT4nBHqvaqB0NKLmRmQqI/hbwElu6nd1HPqyJ\nV8/2jlI7JVh4MhPFY2Ot+aGGL24GV1cz0ykz1yJ28i2HvPd0mMPRw7RL4aTS\ngqGafHxNj4s2gtDSqCYTX3mIx1HGH4w36Zq74/2/3di0x3MPrxKNLqrZXsEN\ngDx53lTq3n1JwUJOpPvwh6nCDhGaGHeuuZwXYnDaFsCjKl4V9a+N3h9OAsPB\nyITz0lgfk0KUWnk8L7M7k6ceA226TYXkWCjSSb9k4CxF2B110dtJBnMGSWU/\njS8O\r\n=o5pP\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "57db57fc72ca0c4852efd73590ba052dfc1db9fd",
  "homepage": "https://github.com/bigpipe/diagnostics",
  "keywords": [
    "debug",
    "debugger",
    "debugging",
    "diagnostic",
    "diagnostics",
    "event",
    "loop",
    "metrics",
    "stats"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "3rdeden",
      "email": "npm@3rd-Eden.com"
    },
    {
      "name": "swaagie",
      "email": "info@martijnswaagman.nl"
    },
    {
      "name": "v1",
      "email": "npm@3rd-Eden.com"
    }
  ],
  "name": "diagnostics",
  "optionalDependencies": {},
  "readme": "# Diagnostics\n\n[![Build Status](https://travis-ci.org/bigpipe/diagnostics.svg?branch=master)](https://travis-ci.org/bigpipe/diagnostics)\n\nDiagnostics is a small debugging library which allows you to output your debug\nlogs by setting an environment variable. The library works for server-side and\nclient-size applications so it's great for writing isomorphic JavaScript.\n\nThe debug output can be triggered using environment variables on the server and\nusing localStorage, hashtags and window.name on the browser. If the debug output\nis not enabled this module will result in an empty function causing the\nJavaScript compiler engines to remove it completely from your code so there is\nabsolutely no performance overhead or excuses left to not use logging in your\ncode!\n\n## Installation\n\nThe module is released in the public npm registry and can easily be installed by\nrunning.\n\n```\nnpm install --save diagnostics\n```\n\nFor client-side/front-end facing application we assume that you're using\n`browserify` as your build tool as the client code is bundled as the\n`browser.js` file in the root of this repository.\n\n## Usage\n\nWhen you require the module it returns a function that expect a name or prefix\nfor the debug messages. This prefix is what you use to enable specific debug\nmessages.\n\nThe exported function of the module accepts 2 arguments:\n\n1. `name` The namespace of the debug logger.\n2. `options` These options can only be applied to the server, not client code:\n  - `colors`: Enable or disable colors. Defaults to true if your stdout is a tty.\n  - `stream`: The stream instance we should write our logs to. We default to\n    `process.stdout` (unless you change the default using the `.to` method).\n\n```js\nvar debug = require('diagnostics')('foo');\ndebug('hello world %d', 12);\n```\n\nIn the example above you can see that we've created a new diagnostics function\ncalled debug. It's name is set to `foo`. So when we run this in Node.js using:\n\n```\nnode index.js\n```\n\nWe will see nothing in the console as the log messages are disabled by default.\nBut when set the `DEBUG` or `DIAGNOSTICS` environment variables to the name of\nthe debug function it will show up:\n\n```\nDIAGNOSTICS=foo node index.js\n\nhello world 12\n```\n\nYou can enable or disable specific diagnostic instances in the ENV variables by\nseparating them using a space or comma:\n\n```\nDEBUG=foo,-bar,primus:*\n```\n\nIn the example above you also see an example of a wild card `*`. This ensures\nthat anything after it or before it will be allowed.\n\nTo make it easier to see where the log messages are coming from they are\ncolored automatically based on the namespace you provide them. The deeper the\nnamespace, the lighter name will be toned as seen in the following output.\n\n![output](output.PNG)\n\n## Browser\n\nThe usage for browser is exactly the same as for node. You require the\n`diagnostics` method and supply it with a name argument. The big difference is\nthat no longer can use environment variables as these only work on the server.\nSo to go around that you can use:\n\n- **hashtag** The hashtag will be parsed using query string decoding. So if you\n  have an hash `#debug=foo` it will trigger all `foo` lines to be dumped to your\n  browser console.\n- **localStorage** We will search for a query string in either the `env` or\n  `debug` key of `localStorage`. We again assume that the value has query string\n  encode value which contains either `debug` or `diagnostics`.\n  `localStorage.env = 'diagnostics=foo'`.\n- **window.name** As `localStorage` is not available in all browsers, we provide\n  a fallback to `window.name` which can contain the same values as the\n  `localStorage`'s env/debug keys.\n\nUnlike the server, the output of the browser is not colored. The reason for this\nthat it would take a considerable amount of code. Which is not worth the benefit\nas you usually want your front-end code to be as small as possible.\n\n#### Multiple streams\n\n> Please note that this feature is server-side only as in the browser we can only\n> output to the console\n\nThe beauty of this logger is that it allows a custom stream where you can write\nthe data to. So you can just log it all to a separate server, database and what\nnot. But we don't just allow one stream we allow multiple streams so you might\nwant to log to disk AND just output it in your terminal. The only thing you need\nto do is either use:\n\n```js\nrequire('diagnostics').to([\n  stream1,\n  stream2\n]);\n```\n\nTo set multiple streams as the default streams or supply an array for the logger\nit self:\n\n```js\nvar debug = require('diagnostics')('example', { stream: [\n  stream1,\n  stream2\n]});\n\ndebug('foo');\n```\n\n## License\n\n[MIT](LICENSE.md)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/bigpipe/diagnostics.git"
  },
  "scripts": {
    "test": "mocha --reporter spec --ui bdd test.js"
  },
  "version": "1.1.1"
}
